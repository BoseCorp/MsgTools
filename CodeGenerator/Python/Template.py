#    <OUTPUTFILENAME>
#    Created <DATE> from:
#        Messages = <INPUTFILENAME>
#        Template = <TEMPLATEFILENAME>
#        Language = <LANGUAGEFILENAME>
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from Messaging import Messaging
import Messaging as msg

class <MSGNAME> :
    ID = <MSGID>
    SIZE = <MSGSIZE>
    MSG_OFFSET = Messaging.hdrSize
    FIELDINFOS = <FIELDINFOS>
    
    @staticmethod
    def set(bytearray, fieldInfo, value, index=1):
        if(fieldInfo["Units"] != "ASCII"):
            value = int(value)
        if(fieldInfo["Count"] == 1):
            getattr(<MSGNAME>, fieldInfo["Set"])(bytearray, value)
        else:
            getattr(<MSGNAME>, fieldInfo["Set"])(bytearray, value, index)

    @staticmethod
    def get(bytearray, fieldInfo, index=1):
        if(fieldInfo["Count"] == 1):
            value = getattr(<MSGNAME>, fieldInfo["Get"])(bytearray)
        else:
            value = getattr(<MSGNAME>, fieldInfo["Get"])(bytearray, index)
        return value

    @staticmethod
    def Create() :
        bytes = ctypes.create_string_buffer(<MSGNAME>.MSG_OFFSET + <MSGNAME>.SIZE)

        Messaging.hdr.SetSource(bytes, 0)
        Messaging.hdr.SetDestination(bytes, 0)
        Messaging.hdr.SetID(bytes, <MSGNAME>.ID)
        Messaging.hdr.SetLength(bytes, <MSGNAME>.SIZE)
        Messaging.hdr.SetPriority(bytes, 0)
        Messaging.hdr.SetType(bytes, 0)

        <INIT_CODE>
        return bytes

    @staticmethod
    def MsgName():
        return "<MSGNAME>"
    # Enumerations
    <ENUMERATIONS>
    # Accessors
    <ACCESSORS>

Messaging.Register("<MSGNAME>", <MSGNAME>.ID, <MSGNAME>)
